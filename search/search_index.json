{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#why","title":"Why ?","text":"<p>When working on a new project, we frequently encountered challenges such as:</p> <ol> <li>Reproducibility: How can we ensure that our results are reproducible across different environments?</li> <li>Boilerplate Code: We often find ourselves writing the same boilerplate code over and over again.</li> </ol> <p>To address these challenges, we have created a template for scikit-learn projects that streamlines the setup process and helps you focus on your research.</p>"},{"location":"#main-technologies","title":"Main Technologies","text":"<ul> <li>scikit-learn: A Python library for machine learning that provides simple and efficient tools for data mining and analysis. Built on NumPy, SciPy, and Matplotlib, it is widely used for both research and production applications.</li> <li>Hydra: A powerful configuration framework for managing complex applications. It enables dynamic composition of hierarchical configurations, allowing overrides via config files and the command line.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Click Use this template to create a new repository.</p> <p>Once your repository is set up using the template, clone it and start working with the following commands (We use the Rye Python package manager):</p> <pre><code># Install Rye (https://rye.astral.sh/guide/installation/)\ncurl -sSf https://rye.astral.sh/get | bash\n\n# Clone the repository &amp; cd into it\ngit clone https://github.com/insane-group/&lt;YOUR-PROJECT-NAME&gt;\ncd &lt;YOUR-PROJECT-NAME&gt;\n\n# Rename the project and make sure you change the project details (e.g. name, description, URLs) in the following files:\n# 1. pyproject.toml\n# 2. mkdocs.yml\n# 3. README.md\n# 4. CITATION.cff\nmv src/project src/&lt;YOUR-PROJECT-NAME&gt;\n\n# Install dependencies using Rye\nrye sync\n\n# Activate the virtual environment\nsource .venv/bin/activate\n\n# Install the pre-commit hooks\nrye run pre-commit install\n\n# Run the training/evaluation script (Run with --help to see all options)\n# Example usage\n# Override any config parameter from command line\npython src/project/train.py trainer.max_epochs=20 model.optimizer.lr=1e-4\n# train on CPU\npython src/project/train.py trainer=cpu\n# train on 1 GPU\npython src/project/train.py trainer=gpu\n# test checkpoint on test dataset\npython src/project/test.py checkpoint=\"/path/to/ckpt/name.ckpt\"\n</code></pre>"},{"location":"#performing-tasks-using-poethepoet","title":"Performing tasks using <code>poethepoet</code>","text":"<p>We are using poethepoet, to perform various development oriented tasks. Formatting, type-checking, as well as a few other operations, can be performed by running</p> <pre><code>poe &lt;task&gt;\n</code></pre> <p>Tip</p> <p>Consider installing <code>poe</code> as global dependency to make your life easier using <code>rye install poethepoet</code> .</p> <p>where <code>&lt;task&gt;</code> is one of the tasks listed by running:</p> <pre><code>poe --help\nPoe the Poet - A task runner that works well with poetry.\nversion 0.28.0\n\nResult: No task specified.\n\nUsage:\n  poe [global options] task [task arguments]\n\nGlobal options:\n  -h, --help            Show this help page and exit\n  --version             Print the version and exit\n  -v, --verbose         Increase command output (repeatable)\n  -q, --quiet           Decrease command output (repeatable)\n  -d, --dry-run         Print the task contents but don't actually run it\n  -C PATH, --directory PATH\n                        Specify where to find the pyproject.toml\n  -e EXECUTOR, --executor EXECUTOR\n                        Override the default task executor\n  --ansi                Force enable ANSI output\n  --no-ansi             Force disable ANSI output\n\nConfigured tasks:\n  clean                 Clean up any auxiliary files\n  format                Format your codebase\n  hooks                 Run all pre-commit hooks\n  test                  Run the test suite\n  type-check            Run static type checking on your codebase\n  lint                  Lint your code for errors\n  docs                  Build and serve the documentation\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<p>The project follows a standard structure for a Python project.</p> <pre><code>\u251c\u2500\u2500 CITATION.cff                                 &lt;- Citation file for referencing the project\n\u251c\u2500\u2500 configs                                      &lt;- Hydra configuration files\n\u2502   \u251c\u2500\u2500 callbacks                                  &lt;- Configs for training callbacks\n\u2502   \u251c\u2500\u2500 data                                       &lt;- Configs for loading the dataset\n\u2502   \u251c\u2500\u2500 hydra                                      &lt;- Hydra-specific settings\n\u2502   \u251c\u2500\u2500 loggers                                    &lt;- Configs for logging\n\u2502   \u251c\u2500\u2500 model                                      &lt;- Model-specific config\n\u2502   \u251c\u2500\u2500 test.yaml                                  &lt;- Test configuration file\n\u2502   \u251c\u2500\u2500 trainer                                    &lt;- Configs for the training loop\n\u2502   \u2514\u2500\u2500 train.yaml                                 &lt;- Training configuration file\n\u251c\u2500\u2500 data                                         &lt;- Dataset storage directory\n\u251c\u2500\u2500 docs                                         &lt;- Project documentation\n\u2502   \u251c\u2500\u2500 CODE_OF_CONDUCT.md                         &lt;- Guidelines for community behavior\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md                            &lt;- Instructions for contributing to the project\n\u2502   \u251c\u2500\u2500 index.md                                   &lt;- Main documentation page\n\u2502   \u251c\u2500\u2500 LICENSE                                    &lt;- License information for the project\n\u2502   \u251c\u2500\u2500 code                                       &lt;- Source code documentation\n\u2502   \u2514\u2500\u2500 welcome.md                                 &lt;- Welcome page for the project\n\u251c\u2500\u2500 .editorconfig                                &lt;- Editor configuration for consistent formatting\n\u251c\u2500\u2500 .github                                      &lt;- GitHub-specific configurations\n\u2502   \u2514\u2500\u2500 workflows                                  &lt;- CI/CD workflow definitions for GitHub Actions\n\u251c\u2500\u2500 .gitignore                                   &lt;- Files and directories to ignore in Git\n\u251c\u2500\u2500 LICENSE                                      &lt;- License information for the project\n\u251c\u2500\u2500 logs                                         &lt;- Logs generated during training/testing\n\u251c\u2500\u2500 mkdocs.yml                                   &lt;- Configuration for MkDocs documentation site\n\u251c\u2500\u2500 models                                       &lt;- Trained models and related files\n\u251c\u2500\u2500 notebooks                                    &lt;- Jupyter notebooks for experiments and analysis\n\u2502   \u2514\u2500\u2500 template.ipynb                             &lt;- Notebook template for new experiments\n\u251c\u2500\u2500 .pre-commit-config.yaml                      &lt;- Pre-commit hook configurations\n\u251c\u2500\u2500 pyproject.toml                               &lt;- Python project configuration file\n\u251c\u2500\u2500 .python-version                              &lt;- Python version specification\n\u251c\u2500\u2500 README.md                                    &lt;- Main project README file\n\u251c\u2500\u2500 requirements-dev.lock                        &lt;- Locked dependencies for development\n\u251c\u2500\u2500 requirements.lock                            &lt;- Locked dependencies for production\n\u251c\u2500\u2500 src                                          &lt;- Source code directory\n\u2502   \u2514\u2500\u2500 project                                    &lt;- Main project codebase\n\u251c\u2500\u2500 tests                                        &lt;- Unit tests for the project\n\u2502   \u251c\u2500\u2500 __init__.py                                &lt;- Init file for test module\n\u2502   \u2514\u2500\u2500 test_model.py                              &lt;- Tests for model functionality\n\u2514\u2500\u2500 .vscode                                      &lt;- VS Code workspace settings\n    \u251c\u2500\u2500 extensions.json                            &lt;- Recommended extensions for VS Code\n    \u251c\u2500\u2500 launch.json                                &lt;- Debugging configurations\n    \u2514\u2500\u2500 settings.json                              &lt;- VS Code-specific settings\n</code></pre>"},{"location":"#exploring-the-documentation","title":"Exploring the Documentation","text":"<p>The documentation is generated from Python docstrings using <code>MkDocs</code> and <code>mkdocstrings</code> for the source code, while the rest is written in standard Markdown. To view it, run <code>poe docs</code> in the terminal or visit <code>https://insane-group.github.io/scikit-learn-template/</code>.</p>"},{"location":"#credits","title":"Credits","text":"<p>This template was created by INSANE Group and is based on the following projects:</p> <ul> <li>NN-Template by Grok AI</li> <li>Lightning Hydra Template by ashleve</li> <li>Pytorch Lightning Template by DavidZhang73</li> <li>MNIST Classifier by kengz</li> <li>Predicting Methane Absorption in Porous Material by Vassilis Sioros</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting one of the project maintainers listed below. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT/#project-maintainers","title":"Project Maintainers","text":"<ul> <li>Vassilis Sioros &lt;v.sioros@iit.demokritos.gr&gt;</li> </ul>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>These guidelines help ensure a structured and effective development process.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>By contributing to this project, you agree to uphold the Code of Conduct.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>As the sole contributor, you should follow a structured workflow that includes Issue tracking and Pull Requests (PRs). Your supervisor may provide feedback on key contributions.</p>"},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>Use Issues to document problems, propose new features, or note documentation changes. When creating an Issue:</p> <ul> <li>Clearly describe the problem or feature request.</li> <li>If relevant, include error messages, steps to reproduce, or possible solutions.</li> <li>Check for existing Issues to avoid duplication.</li> </ul>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>Pull Requests help track changes systematically. When submitting a PR:</p> <ul> <li>Focus on a single feature or fix.</li> <li>Keep changes minimal and well-documented.</li> <li>Ensure new functionality includes unit or integration tests.</li> <li>Update documentation if required.</li> <li>Link the PR to an existing Issue if applicable.</li> <li>Request a review from your supervisor if the change is significant.</li> </ul> <p>For more details, refer to this video. Additionally, feel free to also check this guide.</p>"},{"location":"CONTRIBUTING/#reviewing-pull-requests","title":"Reviewing Pull Requests","text":"<ol> <li>Self-Review: Before finalizing a PR, review your code for clarity, correctness, and adherence to best practices.</li> <li>Supervisor Review: Request feedback from your supervisor.</li> <li>Address Feedback: Implement suggested modifications or justify why changes are unnecessary.</li> <li>Merging PRs: Once reviewed and approved, merge into the appropriate branch, ensuring project integrity.</li> </ol>"},{"location":"CONTRIBUTING/#documenting-your-changes","title":"Documenting Your Changes","text":"<p>This project uses MkDocs for documentation, generated from Python docstrings. When modifying code:</p> <ul> <li>Update relevant docstrings to reflect changes.</li> <li>Run <code>poe docs</code> to verify that the documentation builds without errors.</li> </ul> <p>By following these guidelines, you ensure maintainability and clarity in your contributions.</p>"},{"location":"LICENSE/","title":"Apache License","text":"<p>Version 2.0, January 2004 &lt;http://www.apache.org/licenses/&gt;</p>"},{"location":"LICENSE/#terms-and-conditions-for-use-reproduction-and-distribution","title":"Terms and Conditions for use, reproduction, and distribution","text":""},{"location":"LICENSE/#1-definitions","title":"1. Definitions","text":"<p>\u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.</p> <p>\u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p> <p>\u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License.</p> <p>\u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p> <p>\u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p> <p>\u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).</p> <p>\u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p> <p>\u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d</p> <p>\u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p>"},{"location":"LICENSE/#2-grant-of-copyright-license","title":"2. Grant of Copyright License","text":"<p>Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.</p>"},{"location":"LICENSE/#3-grant-of-patent-license","title":"3. Grant of Patent License","text":"<p>Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.</p>"},{"location":"LICENSE/#4-redistribution","title":"4. Redistribution","text":"<p>You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:</p> <ul> <li>(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and</li> <li>(b) You must cause any modified files to carry prominent notices stating that You changed the files; and</li> <li>(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and</li> <li>(d) If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</li> </ul> <p>You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>"},{"location":"LICENSE/#5-submission-of-contributions","title":"5. Submission of Contributions","text":"<p>Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.</p>"},{"location":"LICENSE/#6-trademarks","title":"6. Trademarks","text":"<p>This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.</p>"},{"location":"LICENSE/#7-disclaimer-of-warranty","title":"7. Disclaimer of Warranty","text":"<p>Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.</p>"},{"location":"LICENSE/#8-limitation-of-liability","title":"8. Limitation of Liability","text":"<p>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p>"},{"location":"LICENSE/#9-accepting-warranty-or-additional-liability","title":"9. Accepting Warranty or Additional Liability","text":"<p>While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"LICENSE/#appendix-how-to-apply-the-apache-license-to-your-work","title":"APPENDIX: How to apply the Apache License to your work","text":"<p>To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets <code>[]</code> replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives.</p> <pre><code>Copyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"welcome/","title":"Welcome to MkDocs","text":"<p>MkDocs is a static site generator that's geared towards project documentation. This is an example documentation using MkDocs Material, showcasing various features.</p>"},{"location":"welcome/#features-showcase","title":"Features Showcase","text":""},{"location":"welcome/#1-code-blocks","title":"1. Code Blocks","text":"<p>You can highlight code using triple backticks:</p> <pre><code>def hello_world():\n    print(\"Hello, MkDocs!\")\n</code></pre>"},{"location":"welcome/#2-admonitions","title":"2. Admonitions","text":"<p>Tip</p> <p>This is a tip box using MkDocs Material admonitions.</p> <p>Warning</p> <p>Be cautious when making changes to your MkDocs configuration.</p>"},{"location":"welcome/#3-tables","title":"3. Tables","text":"Feature Description Code Blocks Syntax-highlighted code Admonitions Informational callout boxes Search Built-in full-text search"},{"location":"welcome/#4-task-lists","title":"4. Task Lists","text":"<ul> <li> Install MkDocs</li> <li> Add MkDocs Material theme</li> <li> Deploy site</li> </ul>"},{"location":"welcome/#5-collapsible-sections","title":"5. Collapsible Sections","text":"Click to expand <p>This is a collapsible section using MkDocs Material extensions.</p>"},{"location":"welcome/#conclusion","title":"Conclusion","text":"<p>MkDocs Material provides a clean and professional way to document your projects. Explore more features in the official documentation.</p>"},{"location":"code/models/mnist/","title":"Documentation for <code>project/models/mnist.py</code>","text":"<p>Source Code Documentation</p> <p>The source codedocumentation is generated from Python docstrings using <code>MkDocs</code> and <code>mkdocstrings</code>.</p> <p>Classes:</p> Name Description <code>MNISTLitModule</code> <p>Example of a <code>LightningModule</code> for MNIST classification.</p>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule","title":"MNISTLitModule","text":"<pre><code>MNISTLitModule(optimizer: Optimizer, scheduler: _LRScheduler, input_size: int = 784, lin1_size: int = 256, lin2_size: int = 256, lin3_size: int = 256, output_size: int = 10, compile: bool = True)\n</code></pre> <p>               Bases: <code>LightningModule</code></p> <p>Example of a <code>LightningModule</code> for MNIST classification.</p> <p>Parameters:</p> Name Type Description Default <code>optimizer</code> <code>Optimizer</code> <p>The optimizer to use.</p> required <code>scheduler</code> <code>_LRScheduler</code> <p>The learning rate scheduler to use.</p> required <code>input_size</code> <code>int</code> <p>The size of the input layer. Defaults to 784.</p> <code>784</code> <code>lin1_size</code> <code>int</code> <p>The size of the first linear layer. Defaults to 256.</p> <code>256</code> <code>lin2_size</code> <code>int</code> <p>The size of the second linear layer. Defaults to 256.</p> <code>256</code> <code>lin3_size</code> <code>int</code> <p>The size of the third linear layer. Defaults to 256.</p> <code>256</code> <code>output_size</code> <code>int</code> <p>The size of the output layer. Defaults to 10.</p> <code>10</code> <code>compile</code> <code>bool</code> <p>Whether to compile the module or not. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Methods:</p> Name Description <code>configure_optimizers</code> <p>Configure optimizers and learning-rate schedulers.</p> <code>forward</code> <p>Performs a forward pass through the model <code>self.net</code>.</p> <code>model_step</code> <p>Performs a single model step on a batch of data.</p> <code>on_test_epoch_end</code> <p>Lightning hook that is called when a test epoch ends.</p> <code>on_train_epoch_end</code> <p>Lightning hook that is called when a training epoch ends.</p> <code>on_train_start</code> <p>Lightning hook that is called when training begins.</p> <code>on_validation_epoch_end</code> <p>Lightning hook that is called when a validation epoch ends.</p> <code>setup</code> <p>Called at the beginning of fit (train + validate), validate, test, or predict.</p> <code>test_step</code> <p>Performs a single test step on a batch of data from the test set.</p> <code>training_step</code> <p>Perform a single training step on a batch of data from the training set.</p> <code>validation_step</code> <p>Perform a single validation step on a batch of data from the validation set.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def __init__(\n    self,\n    optimizer: torch.optim.Optimizer,\n    scheduler: torch.optim.lr_scheduler._LRScheduler,\n    input_size: int = 784,\n    lin1_size: int = 256,\n    lin2_size: int = 256,\n    lin3_size: int = 256,\n    output_size: int = 10,\n    compile: bool = True,\n) -&gt; None:\n    \"\"\"\n    Initializes the MNISTLitModule.\n\n    Args:\n        optimizer (torch.optim.Optimizer): The optimizer to use.\n        scheduler (torch.optim.lr_scheduler._LRScheduler): The learning rate scheduler to use.\n        input_size (int, optional): The size of the input layer. Defaults to 784.\n        lin1_size (int, optional): The size of the first linear layer. Defaults to 256.\n        lin2_size (int, optional): The size of the second linear layer. Defaults to 256.\n        lin3_size (int, optional): The size of the third linear layer. Defaults to 256.\n        output_size (int, optional): The size of the output layer. Defaults to 10.\n        compile (bool, optional): Whether to compile the module or not. Defaults to True.\n\n    Returns:\n        None\n    \"\"\"\n    super().__init__()\n\n    # this line allows to access init params with 'self.hparams' attribute\n    # also ensures init params will be stored in ckpt\n    self.save_hyperparameters(logger=False, ignore=[\"net\"])\n\n    self.net = nn.Sequential(\n        nn.Linear(input_size, lin1_size),\n        nn.BatchNorm1d(lin1_size),\n        nn.ReLU(),\n        nn.Linear(lin1_size, lin2_size),\n        nn.BatchNorm1d(lin2_size),\n        nn.ReLU(),\n        nn.Linear(lin2_size, lin3_size),\n        nn.BatchNorm1d(lin3_size),\n        nn.ReLU(),\n        nn.Linear(lin3_size, output_size),\n    )\n\n    # loss function\n    self.criterion = torch.nn.CrossEntropyLoss()\n\n    # metric objects for calculating and averaging accuracy across batches\n    self.train_acc = Accuracy(task=\"multiclass\", num_classes=10)\n    self.val_acc = Accuracy(task=\"multiclass\", num_classes=10)\n    self.test_acc = Accuracy(task=\"multiclass\", num_classes=10)\n\n    # for averaging loss across batches\n    self.train_loss = MeanMetric()\n    self.val_loss = MeanMetric()\n    self.test_loss = MeanMetric()\n\n    # for tracking best so far validation accuracy\n    self.val_acc_best = MaxMetric()\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.configure_optimizers","title":"configure_optimizers","text":"<pre><code>configure_optimizers() -&gt; Dict[str, Any]\n</code></pre> <p>Configure optimizers and learning-rate schedulers.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict containing the configured optimizers and learning-rate schedulers to be used for training.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def configure_optimizers(self) -&gt; Dict[str, Any]:\n    \"\"\"Configure optimizers and learning-rate schedulers.\n\n    Returns:\n        A dict containing the configured optimizers and learning-rate schedulers to be used for training.\n    \"\"\"\n    optimizer = self.hparams.optimizer(params=self.trainer.model.parameters())\n    if self.hparams.scheduler is not None:\n        scheduler = self.hparams.scheduler(optimizer=optimizer)\n        return {\n            \"optimizer\": optimizer,\n            \"lr_scheduler\": {\n                \"scheduler\": scheduler,\n                \"monitor\": \"val/loss\",\n                \"interval\": \"epoch\",\n                \"frequency\": 1,\n            },\n        }\n    return {\"optimizer\": optimizer}\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.forward","title":"forward","text":"<pre><code>forward(x: Tensor) -&gt; Tensor\n</code></pre> <p>Performs a forward pass through the model <code>self.net</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tensor</code> <p>A tensor of images.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>A tensor of logits.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def forward(self, x: torch.Tensor) -&gt; torch.Tensor:\n    \"\"\"Performs a forward pass through the model `self.net`.\n\n    Args:\n        x: A tensor of images.\n\n    Returns:\n        A tensor of logits.\n    \"\"\"\n    batch_size, _, _, _ = x.size()\n\n    x = x.view(batch_size, -1)\n\n    return self.net(x)\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.model_step","title":"model_step","text":"<pre><code>model_step(batch: Tuple[Tensor, Tensor]) -&gt; Tuple[Tensor, Tensor, Tensor]\n</code></pre> <p>Performs a single model step on a batch of data.</p> <p>Parameters:</p> Name Type Description Default <code>batch</code> <code>Tuple[Tensor, Tensor]</code> <p>A batch of data (a tuple) containing the input tensor of images and target labels.</p> required <p>Returns:</p> Type Description <code>Tuple[Tensor, Tensor, Tensor]</code> <p>A tuple containing (in order): - A tensor of losses. - A tensor of predictions. - A tensor of target labels.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def model_step(\n    self, batch: Tuple[torch.Tensor, torch.Tensor]\n) -&gt; Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n    \"\"\"Performs a single model step on a batch of data.\n\n    Args:\n        batch: A batch of data (a tuple) containing the input tensor of images and target\n            labels.\n\n    Returns:\n        A tuple containing (in order):\n            - A tensor of losses.\n            - A tensor of predictions.\n            - A tensor of target labels.\n    \"\"\"\n    x, y = batch\n    logits = self.forward(x)\n    loss = self.criterion(logits, y)\n    preds = torch.argmax(logits, dim=1)\n    return loss, preds, y\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.on_test_epoch_end","title":"on_test_epoch_end","text":"<pre><code>on_test_epoch_end() -&gt; None\n</code></pre> <p>Lightning hook that is called when a test epoch ends.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def on_test_epoch_end(self) -&gt; None:\n    \"\"\"Lightning hook that is called when a test epoch ends.\"\"\"\n    pass\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.on_train_epoch_end","title":"on_train_epoch_end","text":"<pre><code>on_train_epoch_end() -&gt; None\n</code></pre> <p>Lightning hook that is called when a training epoch ends.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def on_train_epoch_end(self) -&gt; None:\n    \"Lightning hook that is called when a training epoch ends.\"\n    pass\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.on_train_start","title":"on_train_start","text":"<pre><code>on_train_start() -&gt; None\n</code></pre> <p>Lightning hook that is called when training begins.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def on_train_start(self) -&gt; None:\n    \"\"\"Lightning hook that is called when training begins.\"\"\"\n    # by default lightning executes validation step sanity checks before training starts,\n    # so it's worth to make sure validation metrics don't store results from these checks\n    self.val_loss.reset()\n    self.val_acc.reset()\n    self.val_acc_best.reset()\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.on_validation_epoch_end","title":"on_validation_epoch_end","text":"<pre><code>on_validation_epoch_end() -&gt; None\n</code></pre> <p>Lightning hook that is called when a validation epoch ends.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def on_validation_epoch_end(self) -&gt; None:\n    \"Lightning hook that is called when a validation epoch ends.\"\n    acc = self.val_acc.compute()  # get current val acc\n    self.val_acc_best(acc)  # update best so far val acc\n    # log `val_acc_best` as a value through `.compute()` method, instead of as a metric object\n    # otherwise metric would be reset by lightning after each epoch\n    self.log(\n        \"val/acc_best\", self.val_acc_best.compute(), sync_dist=True, prog_bar=True\n    )\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.setup","title":"setup","text":"<pre><code>setup(stage: str) -&gt; None\n</code></pre> <p>Called at the beginning of fit (train + validate), validate, test, or predict.</p> <p>This is a good place to build models dynamically or adjust something about them. This hook is called on every process when using DDP.</p> <p>Parameters:</p> Name Type Description Default <code>stage</code> <code>str</code> <p>One of \"fit\", \"validate\", \"test\", or \"predict\".</p> required Source code in <code>src/project/models/mnist.py</code> <pre><code>def setup(self, stage: str) -&gt; None:\n    \"\"\"Called at the beginning of fit (train + validate), validate, test, or predict.\n\n    This is a good place to build models dynamically or adjust something about them. This\n    hook is called on every process when using DDP.\n\n    Args:\n        stage: One of \"fit\", \"validate\", \"test\", or \"predict\".\n    \"\"\"\n    if self.hparams.compile and stage == \"fit\":\n        self.net = torch.compile(self.net)\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.test_step","title":"test_step","text":"<pre><code>test_step(batch: Tuple[Tensor, Tensor], batch_idx: int) -&gt; None\n</code></pre> <p>Performs a single test step on a batch of data from the test set.</p> <p>Parameters:</p> Name Type Description Default <code>batch</code> <code>Tuple[Tensor, Tensor]</code> <p>A batch of data containing the input tensor of images and target labels.</p> required <code>batch_idx</code> <code>int</code> <p>The index of the current batch.</p> required Source code in <code>src/project/models/mnist.py</code> <pre><code>def test_step(\n    self, batch: Tuple[torch.Tensor, torch.Tensor], batch_idx: int\n) -&gt; None:\n    \"\"\"Performs a single test step on a batch of data from the test set.\n\n    Args:\n        batch (Tuple[torch.Tensor, torch.Tensor]): A batch of data containing the input tensor\n            of images and target labels.\n        batch_idx (int): The index of the current batch.\n    \"\"\"\n    loss, preds, targets = self.model_step(batch)\n\n    # update and log metrics\n    self.test_loss(loss)\n    self.test_acc(preds, targets)\n    self.log(\n        \"test/loss\", self.test_loss, on_step=False, on_epoch=True, prog_bar=True\n    )\n    self.log(\"test/acc\", self.test_acc, on_step=False, on_epoch=True, prog_bar=True)\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.training_step","title":"training_step","text":"<pre><code>training_step(batch: Tuple[Tensor, Tensor], batch_idx: int) -&gt; Tensor\n</code></pre> <p>Perform a single training step on a batch of data from the training set.</p> <p>Parameters:</p> Name Type Description Default <code>batch</code> <code>Tuple[Tensor, Tensor]</code> <p>A batch of data containing the input tensor of images and target labels.</p> required <code>batch_idx</code> <code>int</code> <p>The index of the current batch.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>torch.Tensor: A tensor of losses between model predictions and targets.</p> Source code in <code>src/project/models/mnist.py</code> <pre><code>def training_step(\n    self, batch: Tuple[torch.Tensor, torch.Tensor], batch_idx: int\n) -&gt; torch.Tensor:\n    \"\"\"Perform a single training step on a batch of data from the training set.\n\n    Args:\n        batch (Tuple[torch.Tensor, torch.Tensor]): A batch of data containing the input tensor\n            of images and target labels.\n        batch_idx (int): The index of the current batch.\n\n    Returns:\n        torch.Tensor: A tensor of losses between model predictions and targets.\n    \"\"\"\n    loss, preds, targets = self.model_step(batch)\n\n    # update and log metrics\n    self.train_loss(loss)\n    self.train_acc(preds, targets)\n    self.log(\n        \"train/loss\", self.train_loss, on_step=False, on_epoch=True, prog_bar=True\n    )\n    self.log(\n        \"train/acc\", self.train_acc, on_step=False, on_epoch=True, prog_bar=True\n    )\n\n    # return loss or backpropagation will fail\n    return loss\n</code></pre>"},{"location":"code/models/mnist/#project.models.mnist.MNISTLitModule.validation_step","title":"validation_step","text":"<pre><code>validation_step(batch: Tuple[Tensor, Tensor], batch_idx: int) -&gt; None\n</code></pre> <p>Perform a single validation step on a batch of data from the validation set.</p> <p>Parameters:</p> Name Type Description Default <code>batch</code> <code>Tuple[Tensor, Tensor]</code> <p>A tuple containing the input tensor of images and target labels.</p> required <code>batch_idx</code> <code>int</code> <p>The index of the current batch.</p> required Source code in <code>src/project/models/mnist.py</code> <pre><code>def validation_step(\n    self, batch: Tuple[torch.Tensor, torch.Tensor], batch_idx: int\n) -&gt; None:\n    \"\"\"Perform a single validation step on a batch of data from the validation set.\n\n    Args:\n        batch: A tuple containing the input tensor of images and target labels.\n        batch_idx: The index of the current batch.\n    \"\"\"\n    loss, preds, targets = self.model_step(batch)\n\n    # update and log metrics\n    self.val_loss(loss)\n    self.val_acc(preds, targets)\n    self.log(\"val/loss\", self.val_loss, on_step=False, on_epoch=True, prog_bar=True)\n    self.log(\"val/acc\", self.val_acc, on_step=False, on_epoch=True, prog_bar=True)\n</code></pre>"}]}