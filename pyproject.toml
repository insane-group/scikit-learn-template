[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "scikit-learn-template"
version = "0.1.0"
description = "Generic template to bootstrap your scikit-learn project"
authors = [ { name = "Vassilis Sioros", email = "v.sioros@iit.demokritos.gr" } ]
requires-python = ">=3.11"

classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "hydra-core>=1.3.2",
  "joblib>=1.4.2",
  "matplotlib>=3.10.1",
  "numpy<3",
  "pandas>=2.2.3",
  "scikit-learn>=1.6.1",
  "seaborn>=0.13.2",
  "tqdm>=4.67.1",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = [ "src/project" ]

[tool.ruff]
# Assume Python 3.12
target-version = "py312"

# Same as Black.
line-length = 88
indent-width = 4

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Like Black, indent with spaces, rather than tabs.
format.indent-style = "space"
# Like Black, use double quotes for strings.
format.quote-style = "double"
# Like Black, automatically detect the appropriate line ending.
format.line-ending = "auto"
# Like Black, respect magic trailing commas.
format.skip-magic-trailing-comma = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
format.docstring-code-line-length = "dynamic"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
format.docstring-code-format = false
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
lint.select = [ "E4", "E7", "E9", "F" ]
lint.ignore = [  ]
# Allow fix for all enabled rules (when `--fix`) is provided.
lint.fixable = [ "ALL" ]
lint.unfixable = [  ]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.docformatter]
black = true
non-strict = true
non-cap = [ "src/project" ]
recursive = true
in-place = true

[tool.pytest.ini_options]
pythonpath = [ "src/project" ]
addopts = "-vv --color=yes"
log_cli = false
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s %(levelname)s %(message)s"
log_cli_level = "INFO"
python_files = "test_*.py"
python_functions = "test_*"
testpaths = "tests"
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "skip: Skip tests",
  "xfail: Expected to fail tests",
  "asyncio: Mark test to be run with pytest-asyncio",
]

[tool.mypy]
files = [ "src/project" ]
warn_unused_configs = true
warn_return_any = true
ignore_missing_imports = true
pretty = true
color_output = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true

[tool.rye]
managed = true
virtual = false
dev-dependencies = [
  "mypy>=1.11.2",
  "pre-commit>=3.8.0",
  "poethepoet>=0.28.0",
  "pytest>=8.3.3",
  "pytest-sugar>=1.0.0",
  "pytest-clarity>=1.0.1",
  "mkdocs>=1.6.1",
  "mkdocs-material[imaging]>=9.6.9",
  "mkdocs-minify-plugin>=0.8.0",
  "mkdocs-redirects>=1.2.1",
  "mkdocstrings[python]>=0.26.1",
  "mdx-truly-sane-lists>=1.3",
  "pymdown-extensions>=10.11.1",
  "ipykernel>=6.29.5",
  "ipywidgets>=8.1.5",
  "jupyter>=1.1.1",
]

[tool.vulture]
min_confidence = 95
paths = [ "src/project", "tests" ]

[tool.poe.tasks]
[tool.poe.tasks.clean]
cmd = "rm -rf ./**/__pycache__ dist site .pytest_cache .mypy_cache"
help = "Clean up any auxiliary files"

[tool.poe.tasks.format]
shell = "rye fmt"
help = "Format your codebase"

[tool.poe.tasks.hooks]
cmd = "rye run pre-commit run --all-files"
help = "Run all pre-commit hooks"

[tool.poe.tasks.test]
cmd = "rye test"
help = "Run the test suite"

[tool.poe.tasks.type-check]
cmd = "rye run mypy"
help = "Run static type checking on your codebase"

[tool.poe.tasks.lint]
cmd = "rye lint"
help = "Lint your code for errors"

[tool.poe.tasks.docs]
shell = "rye run mkdocs serve --dev-addr 'localhost:8080'"
help = "Build and serve the documentation"

[tool.bandit]
recursive = true
exclude_dirs = [ "tests" ]
